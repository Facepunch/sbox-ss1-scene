@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet("ChoicePanel.razor.scss")]


<root>
	<div class="choice_modal">
		<div class="choice_lvl_label">
			Level 1
		</div>

		<div class="choice_button_container">
			@for(int i = 0; i < Player.LevelUpChoices.Count; i++)
			{
				var status = Player.LevelUpChoices[i];

				<div class="choice_button" onclick=@(() => ChoiceButtonClicked(TypeLibrary.GetType( status.GetType() )))>
					<div class="choice_icon" style="background-image: url(@(status.IconPath));">

						@if(status.Level > 1)
						{
							<div class="status_level_label">
								@status.Level
							</div>
						}
					</div>

					<div class="choice_title">
						@($"[{i + 1}] {status.Title}")
					</div>

					<div class="choice_description">
						@status.GetUpgradeDescription(status.Level)
					</div>
				</div>
			}
		</div>

		<div class="reroll_button @(Player.NumRerollAvailable <= 0 ? "disabled" : "")" onclick=@(() => RerollButtonClicked())>
			<div class="reroll_button_label @(Player.NumRerollAvailable <= 0 ? "disabled_text" : "")">
				@($"[R]eroll - {Player.NumRerollAvailable}")
			</div>
		</div>
	</div>
</root>

@code
{
	public Player Player { get; set; }

	protected override int BuildHash()
	{
		return HashCode.Combine(
			Time.Now
		);
	}

	void ChoiceButtonClicked(TypeDescription type)
	{
		if (Manager.Instance.IsGameOver)
			return;

		Player.AddStatus(type);
	}

	void RerollButtonClicked()
	{
		if(Manager.Instance.IsGameOver)
			return;

		Player.UseReroll();
	}
}
