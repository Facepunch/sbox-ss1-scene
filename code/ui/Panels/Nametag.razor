@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet("Nametag.razor.scss")]

<root style="opacity: @(Player.IsDead ? 0.6f : 1f);">
	@{
		var displayName = Player.Network.OwnerConnection.DisplayName;
	}

	<label class="name">
		@displayName.Truncate(12, "..")
	</label>

	<label class="level">
		@Player.Level.ToString()
	</label>

	@if(!Player.IsDead)
	{
		var hpPercent = Math.Clamp(Player.Health / Player.Stats[PlayerStat.MaxHp], 0f, 1f);
		var bgColor = Lerp3(new Color(0f, 0.75f, 0f), new Color(0.75f, 0.75f, 0f), new Color(1f, 0f, 0f), 1f - hpPercent);
		var reloadProgress = Utils.EasePercent(Player.ReloadProgress, EasingType.CubicInOut);

		<div class="hpbar">
			<div class="hpbardelta" style="width:@(hpPercent * 91f)%;"></div>
			<div class="hpbaroverlay" style="width:@(hpPercent * 91f)%; background-color:@(bgColor.Rgba);"></div>
		</div>

		<div class="reload_bar @(Player.IsReloading ? "showing" : "")" style="width:@(reloadProgress * 100f)%; opacity: @(Utils.MapReturn(reloadProgress, 0f, 1f, 0f, 1f, EasingType.ExtremeOut));"></div>
	}
	else 
	{
		<div class="hpbar" style="opacity:@(0.5f);">
			<div class="hpbardelta" style="width:@(0f)%;"></div>
			<div class="hpbaroverlay" style="width:@(0f)%;"></div>
		</div>
	}
</root>

@code
{
	public Player Player { get; set; }

	protected override int BuildHash()
	{
		return HashCode.Combine(
			Player.Level,
			Player.Health,
			Player.Stats[PlayerStat.MaxHp],
			Player.ReloadProgress,
			Player.IsReloading
		);
	}

	public Color Lerp3(Color a, Color b, Color c, float t)
	{
		if(t < 0.5f) // 0.0 to 0.5 goes to a -> b
			return Color.Lerp(a, b, t / 0.5f);
		else // 0.5 to 1.0 goes to b -> c
			return Color.Lerp(b, c, (t - 0.5f) / 0.5f);
	}
}
